[{"path":"https://mcol.github.io/caught-by-the-fuzz/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marco Colombo. Author, maintainer.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Colombo M (2025). CBTF: Caught Fuzz! - Minimalistic Fuzz-Test Runner. R package version 0.3.0, https://mcol.github.io/caught---fuzz/.","code":"@Manual{,   title = {CBTF: Caught by the Fuzz! - A Minimalistic Fuzz-Test Runner},   author = {Marco Colombo},   year = {2025},   note = {R package version 0.3.0},   url = {https://mcol.github.io/caught-by-the-fuzz/}, }"},{"path":"https://mcol.github.io/caught-by-the-fuzz/index.html","id":"cbtf-caught-by-the-fuzz-","dir":"","previous_headings":"","what":"CBTF - Caught by the Fuzz!","title":"CBTF - Caught by the Fuzz!","text":"CBTF package implements simple mechanism fuzz-testing functions public interface R package. Fuzz testing helps identify functions lacking sufficient argument validation, uncovers sets inputs , valid function signature, may cause issues within function body. core functionality package fuzz(), whose aim call provided function certain input record output produced. error generated, captured reported user, unless error message matches pattern whitelisted errors. helper function get_exported_functions() identifies functions public interface given package, facilitating generation list functions fuzzed. moment extremely limited: operates first argument doesn’t introduce randomness. However, ’s convenient large number functions test.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"CBTF - Caught by the Fuzz!","text":"first occurrence false positive, message returned indicates input checked function returned cleanly. second case instead reveals function didn’t validate input: indeed, expected environment, used $ operation without checking.","code":"library(CBTF) funs <- get_exported_functions(\"mime\") fuzz(funs, what = list(TRUE)) ## ℹ Fuzzing 2 functions on 1 input ## ✖  🚨   CAUGHT BY THE FUZZ!   🚨 ##  ## ── Test input: TRUE ##       guess_type  FAIL  a character vector argument expected ##  parse_multipart  FAIL  $ operator is invalid for atomic vectors ##  ##  [ FAIL 2 | WARN 0 | SKIP 0 | OK 0 ]"},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/index.html","id":"better-looking-output","dir":"","previous_headings":"Advanced uses","what":"Better-looking output","title":"CBTF - Caught by the Fuzz!","text":"inputs contains complex structures, better provide named list argument fuzz(): names used instead relying deparsing input, may poor. example, compare : :","code":"fuzz(funs, what = list(letters)) ## ℹ Fuzzing 2 functions on 1 input ## ✖  🚨   CAUGHT BY THE FUZZ!   🚨 ##  ## ── Test input: c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", ##  parse_multipart  FAIL  $ operator is invalid for atomic vectors ##  ##  [ FAIL 1 | WARN 0 | SKIP 0 | OK 1 ] fuzz(funs, what = list(letters = letters)) ## ℹ Fuzzing 2 functions on 1 input ## ✖  🚨   CAUGHT BY THE FUZZ!   🚨 ##  ## ── Test input: letters ##  parse_multipart  FAIL  $ operator is invalid for atomic vectors ##  ##  [ FAIL 1 | WARN 0 | SKIP 0 | OK 1 ]"},{"path":"https://mcol.github.io/caught-by-the-fuzz/index.html","id":"fuzzing-for-arguments-other-than-the-first","dir":"","previous_headings":"Advanced uses","what":"Fuzzing for arguments other than the first","title":"CBTF - Caught by the Fuzz!","text":"moment, way fuzz argument first currying function, ensuring preceding arguments filled . example, fuzz nrow argument matrix(), following:","code":"curried.matrix <- function(nrow) matrix(1:10, nrow = nrow) fuzz(\"curried.matrix\", what = list(NA, NULL)) ## ℹ Fuzzing 1 function on 2 inputs ## ℹ Functions will be searched in the global namespace as 'package' was not specified ## ✖  🚨   CAUGHT BY THE FUZZ!   🚨 ##  ## ── Test input: NA ##  curried.matrix  FAIL  invalid 'nrow' value (too large or NA) ##  ## ── Test input: NULL ##  curried.matrix  FAIL  non-numeric matrix extent ##  ##  [ FAIL 2 | WARN 0 | SKIP 0 | OK 0 ]"},{"path":"https://mcol.github.io/caught-by-the-fuzz/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"CBTF - Caught by the Fuzz!","text":"Development CBTF partially supported DFG programme “REPLAY: REProducible Luminescence Data AnalYses” 528704761 led Dr Sebastian Kreutzer (PI Heidelberg University, DE) Dr Thomas Kolb (PI Justus-Liebig-University Giessen, DE). Updates REPLAY project large available REPLAY website.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/CBTF-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CBTF: Caught by the Fuzz! A minimalistic fuzz-test runner — CBTF-package","title":"CBTF: Caught by the Fuzz! A minimalistic fuzz-test runner — CBTF-package","text":"package implements simple mechanism fuzz-testing functions public interface R package.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/CBTF-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CBTF: Caught by the Fuzz! A minimalistic fuzz-test runner — CBTF-package","text":"Fuzz testing helps identify functions lacking sufficient argument validation, uncovers sets inputs , valid function signature, may cause issues within function body. core functionality package fuzz(), whose aim call provided function certain input record output produced. error generated, captured reported user, unless error message matches pattern whitelisted errors. helper function get_exported_functions() identifies functions public interface given package, facilitating generation list functions fuzzed.","code":""},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/CBTF-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CBTF: Caught by the Fuzz! A minimalistic fuzz-test runner — CBTF-package","text":"Marco Colombo mar.colombo13@gmail.com","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/fuzz.html","id":null,"dir":"Reference","previous_headings":"","what":"Fuzz-test the specified functions — fuzz","title":"Fuzz-test the specified functions — fuzz","text":"function calls functions receives objects specified .","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/fuzz.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fuzz-test the specified functions — fuzz","text":"","code":"fuzz(   funs,   what = test_inputs(),   package = NULL,   listify_what = FALSE,   ignore_patterns = \"\",   ignore_warnings = FALSE )"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/fuzz.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fuzz-test the specified functions — fuzz","text":"funs character vector function names test. \"package\" attribute set, functions loaded package's namespace; otherwise, searched global namespace. list objects passed, one time, first argument function funs. Ideally, list named, input tested can pretty-printed corresponding name. unnamed lists, deparsed representation inputs used, may appear unwieldy cases. nothing provided, default set inputs generated test_inputs() used. package character string specifying name package search functions. NULL (default), function first check \"package\" attribute funs, set, names searched global namespace. listify_what Whether input also tested listified version (FALSE default). set TRUE, list(x = x), function operate list(x = x, \"list(x)\" = list(x)), input object x. ignore_patterns One strings containing regular expressions match errors ignore. string \"missing, default\" always ignored. ignore_warnings Whether warnings ignored (FALSE default).","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/fuzz.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fuzz-test the specified functions — fuzz","text":"object class cbtf stores results obtained functions tested.","code":""},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/fuzz.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fuzz-test the specified functions — fuzz","text":"","code":"## this should produce no errors res <- fuzz(funs = c(\"list\", \"matrix\", \"mean\"),             what = test_inputs(c(\"numeric\", \"raw\"))) #> ℹ Fuzzing 3 functions on 8 inputs #> ℹ Functions will be searched in the global namespace as 'package' was not specified summary(res) #> Fuzzed 3 functions on 8 inputs: #>          #>          FAIL WARN SKIP OK #>   list      0    0    0  8 #>   matrix    0    0    0  8 #>   mean      0    0    0  8 #>  #> [ FAIL 0 | WARN 0 | SKIP 0 | OK 24 ]  ## this will catch an error (false positive) fuzz(funs = \"matrix\",  what = test_inputs(\"scalar\")) #> ℹ Fuzzing 1 function on 7 inputs #> ℹ Functions will be searched in the global namespace as 'package' was not specified #> ✖  🚨   CAUGHT BY THE FUZZ!   🚨 #>  #> ── Test input: NULL  #>  matrix  FAIL  'data' must be of a vector type, was 'NULL' #>  #>  [ FAIL 1 | WARN 0 | SKIP 0 | OK 6 ]"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/get_exported_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the names of the exported functions of a package — get_exported_functions","title":"Get the names of the exported functions of a package — get_exported_functions","text":"Get names exported functions package","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/get_exported_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the names of the exported functions of a package — get_exported_functions","text":"","code":"get_exported_functions(package, ignore_names = \"\")"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/get_exported_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the names of the exported functions of a package — get_exported_functions","text":"package Name package fuzz-test. ignore_names Names functions ignore: removed names returned. can helpful, example, discard function aliases.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/get_exported_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the names of the exported functions of a package — get_exported_functions","text":"character vector names functions exported requested package, \"package\" attribute set.","code":""},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/get_exported_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the names of the exported functions of a package — get_exported_functions","text":"","code":"## get the functions in the public interface of this package funs <- get_exported_functions(\"CBTF\")"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/length.cbtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of inputs tested — length.cbtf","title":"Compute the number of inputs tested — length.cbtf","text":"Compute number inputs tested","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/length.cbtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of inputs tested — length.cbtf","text":"","code":"# S3 method for class 'cbtf' length(x)"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/length.cbtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of inputs tested — length.cbtf","text":"x object class cbtf.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/length.cbtf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of inputs tested — length.cbtf","text":"integer corresponding number inputs tested run.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/length.cbtf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of inputs tested — length.cbtf","text":"","code":"res <- fuzz(funs = c(\"list\", \"matrix\", \"mean\"),             what = test_inputs(c(\"numeric\", \"raw\"))) #> ℹ Fuzzing 3 functions on 8 inputs #> ℹ Functions will be searched in the global namespace as 'package' was not specified length(res) #> [1] 8"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/print.cbtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the results from a fuzz run — print.cbtf","title":"Print the results from a fuzz run — print.cbtf","text":"Print results fuzz run","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/print.cbtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the results from a fuzz run — print.cbtf","text":"","code":"# S3 method for class 'cbtf' print(x, show_all = FALSE, ...)"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/print.cbtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the results from a fuzz run — print.cbtf","text":"x object class cbtf. show_all Whether results printed. default (FALSE), functions reported error warning printed. TRUE, functions tested printed, including skipped. ... arguments passed methods. currently ignored.","code":""},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/print.cbtf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print the results from a fuzz run — print.cbtf","text":"","code":"res <- fuzz(funs = c(\"list\", \"matrix\", \"mean\"),             what = test_inputs(c(\"numeric\", \"raw\"))) #> ℹ Fuzzing 3 functions on 8 inputs #> ℹ Functions will be searched in the global namespace as 'package' was not specified print(res, show.all = TRUE) #> ✔  🏃 You didn't get caught by the fuzz! #>  #>  [ FAIL 0 | WARN 0 | SKIP 0 | OK 24 ]"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/summary.cbtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Results summary from a fuzz run — summary.cbtf","title":"Results summary from a fuzz run — summary.cbtf","text":"Generates data frame summary results single run fuzz().","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/summary.cbtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Results summary from a fuzz run — summary.cbtf","text":"","code":"# S3 method for class 'cbtf' summary(object, ...)"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/summary.cbtf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Results summary from a fuzz run — summary.cbtf","text":"object object class cbtf. ... arguments passed methods. currently ignored.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/summary.cbtf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Results summary from a fuzz run — summary.cbtf","text":"data frame following columns returned invisibly: fun names function tested. inputs tested. res One \"OK\", \"FAIL\", \"WARN\" \"SKIP\" function tested. msg message received case error, warning skip, empty string function succeeded.","code":""},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/summary.cbtf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Results summary from a fuzz run — summary.cbtf","text":"","code":"res <- fuzz(funs = c(\"list\", \"matrix\", \"mean\"),             what = test_inputs(c(\"numeric\", \"raw\"))) #> ℹ Fuzzing 3 functions on 8 inputs #> ℹ Functions will be searched in the global namespace as 'package' was not specified summary(res) #> Fuzzed 3 functions on 8 inputs: #>          #>          FAIL WARN SKIP OK #>   list      0    0    0  8 #>   matrix    0    0    0  8 #>   mean      0    0    0  8 #>  #> [ FAIL 0 | WARN 0 | SKIP 0 | OK 24 ]"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/test_inputs.html","id":null,"dir":"Reference","previous_headings":"","what":"Default input tests — test_inputs","title":"Default input tests — test_inputs","text":"function provides selection potentially problematic inputs class. List inputs limited design, can automatically generated setting listify_what = TRUE fuzz().","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/test_inputs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default input tests — test_inputs","text":"","code":"test_inputs(use = \"all\", skip = \"\")"},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/test_inputs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default input tests — test_inputs","text":"use Names input classes use. Valid names \"\" (default), \"scalar\", \"numeric\", \"integer\", \"logical\", \"character\", \"factor\", \"data.frame\", \"matrix\", \"array\", \"date\", \"raw\" \"list\". skip Names input classes skip.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/test_inputs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default input tests — test_inputs","text":"named list inputs corresponding input classes selected.","code":""},{"path":[]},{"path":"https://mcol.github.io/caught-by-the-fuzz/reference/test_inputs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default input tests — test_inputs","text":"","code":"## only the scalar and numeric tests inputs1 <- test_inputs(c(\"scalar\", \"numeric\"))  ## everything but the data, raw and list tests inputs2 <- test_inputs(\"all\", skip = c(\"date\", \"raw\", \"list\"))"},{"path":"https://mcol.github.io/caught-by-the-fuzz/news/index.html","id":"cbtf-030-2025-07-26","dir":"Changelog","previous_headings":"","what":"CBTF 0.3.0 (2025-07-26)","title":"CBTF 0.3.0 (2025-07-26)","text":"Warnings containing name function fuzzed longer reported, make behaviour consistent errors. Add package argument fuzz() alternative simpler way specify namespace function names searched. Don’t consider primitives (list() +) functions arguments (#5). Make argument fuzz() accept list inputs, function can test multiple inputs run. Add function test_inputs() return configurable list problematic inputs. Add listify_what argument fuzz() input also tested listified version. Provide S3 method length(). Make output summary() informative include column inputs tested data frame returned.","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/news/index.html","id":"cbtf-020-2025-07-16","dir":"Changelog","previous_headings":"","what":"CBTF 0.2.0 (2025-07-16)","title":"CBTF 0.2.0 (2025-07-16)","text":"Return object raw results fuzz() provide S3 methods summary() print() (#1). Skip functions call readline(), interactive session stall waiting user input (#4). Skip non-existing function names functions accept arguments. Show progress bar fuzz(). Prettify output fuzz(), summary() print().","code":""},{"path":"https://mcol.github.io/caught-by-the-fuzz/news/index.html","id":"cbtf-010-2024-11-14","dir":"Changelog","previous_headings":"","what":"CBTF 0.1.0 (2024-11-14)","title":"CBTF 0.1.0 (2024-11-14)","text":"First version package. package website now available https://mcol.github.io/caught---fuzz/","code":""}]
